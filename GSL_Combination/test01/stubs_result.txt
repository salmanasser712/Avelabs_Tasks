"stubs.c", line 1: warning: (MISRA-C:2004 20.9/R) The input/output library <stdio.h> shall not be used in production code
"C:\Program Files\ti-cgt-arm_20.2.7.LTS\include\machine/_types.h", line 74: warning: (MISRA-C:2004 1.1/R) Ensure strict ANSI C mode (-ps) is enabled
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 23: warning: (MISRA-C:2004 20.9/R) The input/output library <stdio.h> shall not be used in production code
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 116: warning: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 116: warning: (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "reason" is used as an operand of # or ##.
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 116: warning: (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "gsl_errno" is used as an operand of # or ##.
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 116: warning: (MISRA-C:2004 19.4/R) C macros shall only expand to a braced initialiser, a constant, a string literal, a parenthesised expression, a type qualifier, a storage class specifier, or a do-while-zero construct
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 132: warning: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 133: warning: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 133: warning: (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "b" is used as an operand of # or ##.
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 133: warning: (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "c" is used as an operand of # or ##.
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 134: warning: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 134: warning: (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "b" is used as an operand of # or ##.
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 134: warning: (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "c" is used as an operand of # or ##.
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 134: warning: (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "d" is used as an operand of # or ##.
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 135: warning: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 135: warning: (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "b" is used as an operand of # or ##.
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 135: warning: (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "c" is used as an operand of # or ##.
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 135: warning: (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "d" is used as an operand of # or ##.
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 135: warning: (MISRA-C:2004 19.10/R) In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##. The compiler cannot determine if the parameter "e" is used as an operand of # or ##.
"..\..\..\gsl-2.7.1_Misra\err\gsl_errno.h", line 137: warning: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"..\..\..\gsl-2.7.1_Misra\gsl_inline.h", line 65: warning: (MISRA-C:2004 19.7/A) A function should be used in preference to a function-like macro
"..\..\..\gsl-2.7.1_Misra\block\gsl_check_range.h", line 36: warning: (MISRA-C:2004 6.3/A) typedefs that indicate size and signedness should be used in place of the basic numerical types
"stubs.c", line 11: warning: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"stubs.c", line 14: warning: (MISRA-C:2004 16.7/A) A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object ("reason: const char *")
"stubs.c", line 12: warning: (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function
"stubs.c", line 19: warning: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"stubs.c", line 22: warning: (MISRA-C:2004 16.7/A) A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object ("reason: const char *")
"stubs.c", line 20: warning: (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function
"stubs.c", line 27: warning: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a function argument
"stubs.c", line 30: warning: (MISRA-C:2004 16.7/A) A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object ("reason: const char *")
"stubs.c", line 28: warning: (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function
"stubs.c", line 37: warning: (MISRA-C:2004 20.9/R) The input/output library <stdio.h> shall not be used in production code ("printf")
"stubs.c", line 52: warning: (MISRA-C:2004 20.9/R) The input/output library <stdio.h> shall not be used in production code ("printf")
"stubs.c", line 54: warning: (MISRA-C:2004 20.11/R) The library functions abort, exit, getenv and system from library <stdlib.h> shall not be used
"stubs.c", line 47: warning: (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function
"stubs.c", line 58: warning: (MISRA-C:2004 5.6/A) No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure member and union member names ("n")
"stubs.c", line 58: warning: (MISRA-C:2004 5.6/A) No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure member and union member names ("k")
"stubs.c", line 58: warning: (MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical
"stubs.c", line 58: warning: (MISRA-C:2004 5.6/A) No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure member and union member names ("n")
"stubs.c", line 58: warning: (MISRA-C:2004 5.6/A) No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure member and union member names ("k")
"stubs.c", line 60: warning: (MISRA-C:2004 5.7/A) No identifier name should be reused ("c")
"stubs.c", line 62: warning: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"stubs.c", line 72: warning: (MISRA-C:2004 20.4/R) Dynamic heap memory allocation shall not be used ("malloc")
"stubs.c", line 80: warning: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"stubs.c", line 82: warning: (MISRA-C:2004 20.4/R) Dynamic heap memory allocation shall not be used ("malloc")
"stubs.c", line 86: warning: (MISRA-C:2004 20.4/R) Dynamic heap memory allocation shall not be used ("free")
"stubs.c", line 94: warning: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"stubs.c", line 97: warning: (MISRA-C:2004 12.6/A) Expressions that are effectively Boolean should not be used in operations with expressions that are not effectively Boolean
"stubs.c", line 98: warning: (MISRA-C:2004 12.6/A) Expressions that are effectively Boolean should not be used in operations with expressions that are not effectively Boolean
"stubs.c", line 104: warning: (MISRA-C:2004 5.6/A) No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure member and union member names ("n")
"stubs.c", line 104: warning: (MISRA-C:2004 5.6/A) No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure member and union member names ("k")
"stubs.c", line 104: warning: (MISRA-C:2004 16.4/R) The identifiers used in the declaration and definition of a function shall be identical
"stubs.c", line 104: warning: (MISRA-C:2004 5.6/A) No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure member and union member names ("n")
"stubs.c", line 104: warning: (MISRA-C:2004 5.6/A) No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure member and union member names ("k")
"stubs.c", line 106: warning: (MISRA-C:2004 5.7/A) No identifier name should be reused ("i")
"stubs.c", line 108: warning: (MISRA-C:2004 5.7/A) No identifier name should be reused ("c")
"stubs.c", line 111: warning: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if the expression is not constant and is a return expression
"stubs.c", line 115: warning: (MISRA-C:2004 10.1/R) The value of an expression of integer type shall not be implicitly converted to a different underlying type if it is not a conversion to a wider integer type of the same signedness
"stubs.c", line 117: warning: (MISRA-C:2004 17.4/R) Array indexing shall be the only allowed form of pointer arithmetic
"stubs.c", line 117: warning: (MISRA-C:2004 12.6/A) Expressions that are effectively Boolean should not be used in operations with expressions that are not effectively Boolean
"stubs.c", line 121: warning: last line of file ends without a newline
"stubs.c", line 111: warning: (MISRA-C:2004 14.7/R) A function shall have a single point of exit at the end of the function
